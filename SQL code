SQL Project - Apple Store Data

Stakeholder: App developer who needs data to understand what type of app to build.

Database: AppleStore data from Kaggle. After analysis, the data is clean with no missing values and matching unique idâ€™s between the databases.

Questions:

What app categories are most popular?
Games and Entertainment are the most popular apps.

What type of app, paid or free, has better ratings?
Paid Apps.

How many languages should be supported to have a higher user score?
Apps that support 10-30 languages have higher ratings.

What type of app has the lowest ratings?
Finance and Book Apps have the lowest ratings.

Does the app description impact user rating?
Yes, longer descriptions have better ratings.

What user rating should my app aim for?
A new app with about a 3.5 user score would do well in the market.

What are the top-rated apps within book and finance, and how do their ratings compare to the average rating within the same genre?
The top-rated app for Books is Color Therapy for Adults, with an average 5-star rating from 84000+ total ratings.
The top-rated app for Finance is Credit Karma, with an average 5-star rating from 100,000+ total ratings.

What is the most competitive genre for apps?
Games and Entertainment are highly competitive.

Conclusion:
After thorough analysis, it appears that a paid Finance or Book app supporting 10-30 languages, maintaining an average rating of 3.5 or higher, and offering a detailed product description of 1000 characters+ could thrive in the current market. However, it is important to avoid either a color therapy book or a Credit Karma clone to stand out. To gain deeper insights, a closer examination of customer preferences, app subcategories, and preferred languages is necessary for a more comprehensive strategy.

-- check number of unique apps in both tables--
select count(distinct id) as uniqueappids
from applestore_description_combined

select count(distinct id) as uniqueappids
from applestore

-- check for missing values--
select count (*) as missingvalues
from applestore_description_combined
where app_desc is null

select count (*) as missingvalues
from applestore
where track_name is null or user_rating is null or prime_genre is null

-- find out the number of apps per genre--
select prime_genre, 
  count (*) as numapps
from applestore
group by prime_genre
order by numapps desc

-- get an overview of the apps' rating--
select min(user_rating) as minrating,
  max(user_rating) as maxrating,
  avg(user_rating) as avgrating
from applestore

--data analysis--
-- determine whether paid apps have higher ratings than free apps --
select case
  when price > 0 then 'paid'
  else 'free'
  end as app_type,
  avg(user_rating) as avg_rating
from applestore
group by app_type

-- determine if apps with more supported languages have higher ratings--
select case
  when lang_num < 10 then '<10 languages'
  when lang_num between 10 and 30 then '10-30 languages'
  else '>10 languages'
  end as language_bucket,
  avg(user_rating) as avg_rating
from applestore
group by language_bucket
order by avg_rating desc

-- check genres with low ratings--
select prime_genre, avg(user_rating) as avg_rating
from applestore
group by prime_genre
order by avg_rating asc 
limit 10

-- check if there is a correlation between the length of the app description and the user rating--
select case
  when length(b.app_desc) < 500 then 'short'
  when length(b.app_desc) between 500 and 1000 then 'medium'
  else 'long'
  end as description_length_bucket,
  avg(a.user_rating) as average_rating
from
applestore as a
join
  applestore_description_combined as b
on
  a.id = b.id
group by description_length_bucket
order by average_rating desc

-- what are the top-rated apps within each genre, and how do their ratings compare to the average rating within the same genre?--
with rankedapps as (
  select *, rank() over(partition by prime_genre order by user_rating desc) as genre_rank
  from applestore
  and prime_genre ('Book', 'Finace')
select *,
  avg(user_rating) over(partition by prime_genre) as avg_genre_rating
from rankedapps
where genre_rank = 1
 
