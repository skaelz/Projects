-- check number of unique apps in both tables--
select count(distinct id) as uniqueappids
from applestore_description_combined

select count(distinct id) as uniqueappids
from applestore

-- check for missing values--
select count (*) as missingvalues
from applestore_description_combined
where app_desc is null

select count (*) as missingvalues
from applestore
where track_name is null or user_rating is null or prime_genre is null

-- find out the number of apps per genre--
select prime_genre, 
  count (*) as numapps
from applestore
group by prime_genre
order by numapps desc

-- get an overview of the apps' rating--
select min(user_rating) as minrating,
  max(user_rating) as maxrating,
  avg(user_rating) as avgrating
from applestore

--data analysis--
-- determine whether paid apps have higher ratings than free apps --
select case
  when price > 0 then 'paid'
  else 'free'
  end as app_type,
  avg(user_rating) as avg_rating
from applestore
group by app_type

-- determine if apps with more supported languages have higher ratings--
select case
  when lang_num < 10 then '<10 languages'
  when lang_num between 10 and 30 then '10-30 languages'
  else '>10 languages'
  end as language_bucket,
  avg(user_rating) as avg_rating
from applestore
group by language_bucket
order by avg_rating desc

-- check genres with low ratings--
select prime_genre, avg(user_rating) as avg_rating
from applestore
group by prime_genre
order by avg_rating asc 
limit 10

-- check if there is a correlation between the length of the app description and the user rating--
select case
  when length(b.app_desc) < 500 then 'short'
  when length(b.app_desc) between 500 and 1000 then 'medium'
  else 'long'
  end as description_length_bucket,
  avg(a.user_rating) as average_rating
from
applestore as a
join
  applestore_description_combined as b
on
  a.id = b.id
group by description_length_bucket
order by average_rating desc

-- what are the top-rated apps within each genre, and how do their ratings compare to the average rating within the same genre?--
with rankedapps as (
  select *, rank() over(partition by prime_genre order by user_rating desc) as genre_rank
  from applestore
  and prime_genre ('Book', 'Finace')
select *,
  avg(user_rating) over(partition by prime_genre) as avg_genre_rating
from rankedapps
where genre_rank = 1
 
